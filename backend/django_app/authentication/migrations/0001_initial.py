# Generated by Django 5.0.6 on 2024-11-01 11:01

import authentication.models.profile
import authentication.models.security
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=150, verbose_name="last name"),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "organization",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_pics/%Y/%m/"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="email verified"),
                ),
                ("failed_login_attempts", models.PositiveIntegerField(default=0)),
                ("last_failed_login", models.DateTimeField(blank=True, null=True)),
                (
                    "email_verification_token",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "email_verification_sent_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="APIKey",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "key",
                    models.CharField(
                        default=authentication.models.security.generate_api_key,
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "scopes",
                    models.JSONField(
                        default=list,
                        help_text="List of allowed scopes for this API key",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "rate_limit",
                    models.PositiveIntegerField(
                        default=100, help_text="Maximum requests per hour"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "API key",
                "verbose_name_plural": "API keys",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LoginHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("blocked", "Blocked"),
                            ("suspicious", "Suspicious"),
                        ],
                        default="success",
                        max_length=20,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of the login attempt",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="Browser/client user agent"),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Geographic location based on IP",
                        max_length=255,
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of device used for login",
                        max_length=50,
                    ),
                ),
                ("login_time", models.DateTimeField(auto_now_add=True)),
                (
                    "login_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("google", "Google"),
                            ("github", "GitHub"),
                            ("api", "API"),
                        ],
                        default="email",
                        help_text="Method used for authentication",
                        max_length=20,
                    ),
                ),
                (
                    "failure_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for login failure if status is 'failed'",
                        max_length=100,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="login_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "login history",
                "verbose_name_plural": "login histories",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SecurityLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("details", models.JSONField(default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("object_id", models.UUIDField(null=True)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="low",
                        max_length=20,
                    ),
                ),
                ("is_resolved", models.BooleanField(default=False)),
                ("resolution_notes", models.TextField(blank=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "security log",
                "verbose_name_plural": "security logs",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("name", models.CharField(help_text="Team name", max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "max_members",
                    models.PositiveIntegerField(
                        default=5,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "settings",
                    models.JSONField(
                        default=dict, help_text="Team settings and configurations"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_teams",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "team",
                "verbose_name_plural": "teams",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TeamActivity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("details", models.JSONField(default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("object_id", models.UUIDField(null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="authentication.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "team activity",
                "verbose_name_plural": "team activities",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TeamMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Admin"),
                            ("editor", "Editor"),
                            ("viewer", "Viewer"),
                        ],
                        default="viewer",
                        max_length=20,
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                (
                    "custom_permissions",
                    models.JSONField(
                        default=list,
                        help_text="Additional custom permissions for this member",
                    ),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="team_invites_sent",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="authentication.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "team membership",
                "verbose_name_plural": "team memberships",
            },
        ),
        migrations.AddField(
            model_name="team",
            name="members",
            field=models.ManyToManyField(
                related_name="teams",
                through="authentication.TeamMembership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="UserActivity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("details", models.JSONField(default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("object_id", models.UUIDField(null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user activity",
                "verbose_name_plural": "user activities",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("basic", "Basic"),
                            ("premium", "Premium"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                (
                    "notification_preferences",
                    models.JSONField(
                        default=authentication.models.profile.UserProfile.default_preferences,
                        help_text="User's notification settings",
                    ),
                ),
                (
                    "max_workflows",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Maximum number of workflows allowed",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "usage_stats",
                    models.JSONField(
                        default=dict, help_text="Usage statistics and metrics"
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC", help_text="User's timezone", max_length=50
                    ),
                ),
                ("onboarding_completed", models.BooleanField(default=False)),
                (
                    "account_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user profile",
                "verbose_name_plural": "user profiles",
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["email", "is_active"], name="authenticat_email_7c2cb6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["created_at"], name="authenticat_created_b28532_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="apikey",
            index=models.Index(
                fields=["user", "is_active"], name="authenticat_user_id_297b16_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="apikey",
            index=models.Index(fields=["key"], name="authenticat_key_bb02b2_idx"),
        ),
        migrations.AddIndex(
            model_name="loginhistory",
            index=models.Index(
                fields=["user", "status", "created_at"],
                name="authenticat_user_id_44b9db_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="loginhistory",
            index=models.Index(
                fields=["ip_address", "created_at"],
                name="authenticat_ip_addr_6f73a4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="securitylog",
            index=models.Index(
                fields=["user", "action", "created_at"],
                name="authenticat_user_id_6169c9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="securitylog",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="authenticat_content_7654f2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="teamactivity",
            index=models.Index(
                fields=["user", "action", "created_at"],
                name="authenticat_user_id_72e77e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="teamactivity",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="authenticat_content_8a911b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="teammembership",
            index=models.Index(
                fields=["user", "team", "role"], name="authenticat_user_id_675553_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="teammembership",
            unique_together={("user", "team")},
        ),
        migrations.AddIndex(
            model_name="team",
            index=models.Index(
                fields=["owner", "is_active"], name="authenticat_owner_i_559697_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="useractivity",
            index=models.Index(
                fields=["user", "action", "created_at"],
                name="authenticat_user_id_838da9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="useractivity",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="authenticat_content_68f0c7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userprofile",
            index=models.Index(
                fields=["plan_type", "account_status"],
                name="authenticat_plan_ty_6e7e47_idx",
            ),
        ),
    ]
